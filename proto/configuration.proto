syntax = "proto3";

option go_package = "github.com/rocky-linux/sideline/pb;sidelinepb";

import "google/protobuf/wrappers.proto";
import "third_party/github.com/rocky-linux/srpmproc/proto/cfg.proto";

package sideline;

message Upstream {
  // Target forge
  oneof forge {
    // A git remote
    string git = 1;
  }

  // Depth we need to clone
  // For tags or branches targeting latest, only 1 is needed for example
  int32 depth = 2;

  // Target revision
  oneof target {
    // Caller wants a tag
    string tag = 3;
  }

  // Compare revision (optional)
  oneof compare {
    google.protobuf.StringValue compare_with_tag = 4;
  }
  // Whether the compare repo should be laid out in disk
  // Currently always true whether specified or not because
  // of how `git log` operation is implemented
  bool compare_should_use_osfs = 5;
  enum CompareMode {
    Unknown = 0;
    // Reduce refspecs we fetch for the kernel
    // TM = Target major version, CV = Compare version
    // Uses following refspecs:
    //   * refs/tags/vTM.*
    //   * refs/tags/vCV
    KernelTag = 1;
  }
  CompareMode compare_mode = 6;
}

message SearchReplace {
  string find = 1;
  string replace = 2;
  int32 n = 3;
}

message FileChange {
  // Path to file
  string path = 1;

  // Search and replace operations on file
  repeated SearchReplace search_replace = 2;
}

message Changes {
  // Paths listed here are recursively copied into Source0
  // and overridden (always choosing upstream)
  repeated string recursive_path = 1;

  repeated FileChange file_change = 2;
}

message PresetOverride {
  oneof override {
    string base_url = 1;
    string full_url = 2;
  }
}

message AutoPatch {
  // Whether to add the patch to prep or not
  // Packages that are not auto-patched will need to set this and n_path
  bool add_to_prep = 1;

  // Patch strip depth
  int32 n_path = 2;
}

message ApplyPatch {
  oneof patch {
    // Automatically applied patch (may be problematic with complex specs)
    // Ex. kernel should mostly use custom
    AutoPatch auto_patch = 1;
    // Custom spec change command for this patch (excluding add patch)
    srpmproc.SpecChange custom = 2;
  }
}

message Configuration {
  // Preset for source package
  // Currently only supports "rocky8" or "manual"
  // "rocky8" sets "base_url" to "https://dl.rockylinux.org/pub/rocky/8"
  // "manual" sets nothing
  string preset = 1;

  // Source package name
  // SRPM to be fetched from the source repository
  // Format: {repo}//{name}
  // Example: BaseOS//kernel
  string package = 2;

  // Upstream information
  // Where the upstream of this package is located
  // Only git is supported for now
  Upstream upstream = 3;

  // Changes we want to pull from upstream
  repeated Changes changes = 4;

  // Manual override for preset
  // Only used if preset is "manual"
  PresetOverride preset_override = 5;

  // How to apply the patch to the spec
  ApplyPatch apply_patch = 6;

  // Contact information
  string contact_email = 7;
  string contact_name = 8;
}
